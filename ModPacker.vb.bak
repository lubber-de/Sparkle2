Friend Module ModPacker

	Private ReadOnly LongMatchTag As Byte = &HF8    'Could be changed to &H00, but this is more economical
	Private ReadOnly NextFileTag As Byte = &HFC
	Private ReadOnly EndTag As Byte = 0             'Could be changed to &HF8, but this is more economical (Number of EndTags > Number of LongMatchTags)

	Private FirstBlockOfNextFile As Boolean = False 'If true, this is the first block of next file in same buffer, Lit Selector Bit NOT NEEEDED
	Private NextFileInBuffer As Boolean = False     'Indicates whether the next file is added to the same buffer

	Private BlockUnderIO As Integer = 0
	Private AdLoPos As Byte, AdHiPos As Byte

	'Match offset and length is 1 based
	Private ReadOnly MaxOffset As Integer = 255 + 1 'Offset will be decreased by 1 when saved
	Private ReadOnly ShortOffset As Integer = 63 + 1

	Private ReadOnly MaxLongLen As Byte = 254 + 1   'Cannot be 255, there is an INY in the decompression ASM code, and that would make YR=#$00
	Private ReadOnly MaxMidLen As Byte = 61 + 1     'Cannot be more than 61 because 62=LongMatchTag, 63=NextFileTage
	Private ReadOnly MaxShortLen As Byte = 3 + 1    '1-3, cannot be 0 because it is preserved for EndTag

	'Literal length is 0 based
	Private ReadOnly MaxLitLen As Integer = 1 + 4 + 8 + 32 - 1 - 1  '=43 - this seems to be optimal, 1+4+8+16 and 1+4+8+64 are worse...

	Private MatchBytes As Integer = 0
	Private MatchBits As Integer = 0
	Private LitBits As Integer = 0
	Private MLen As Integer = 0
	Private MOff As Integer = 0

	Private ReadOnly MaxBits As Integer = 2048
	Private MaxLitPerBlock As Integer = 250 - 1     'Maximum number of literals that fits in a block, LitCnt is 0-based
	'(250*8)+9+8+(Close Byte+AdLo+AdHi)*8=2041		'This would be replaced by an uncompressed block that contains 252-253 literals

	Private Seq() As Sequence           'Sequence array, to find the best sequence
	Private SL(), SO(), LL(), LO() As Integer
	Private SI As Integer               'Sequence array index
	Private LitSI As Integer            'Sequence array index of last literal sequence
	Private StartPtr As Integer

	Public Sub PackFile(PN As Byte(), Optional FA As String = "", Optional FUIO As Boolean = False)
		On Error GoTo Err

		'----------------------------------------------------------------------------------------------------------
		'PROCESS FILE
		'----------------------------------------------------------------------------------------------------------

		Prg = PN
		FileUnderIO = FUIO
		PrgAdd = Convert.ToInt32(FA, 16)
		PrgLen = Prg.Length

		ReDim SL(PrgLen - 1), SO(PrgLen - 1), LL(PrgLen - 1), LO(PrgLen - 1)
		ReDim Seq(PrgLen)       'This is actually one element more in the array, to have starter element with 0 values

		'LitCnt = 0              'Reset LitCnt: we start with 1 literal (LitCnt is 0 based)

		With Seq(1)             'Initialize first element of sequence
			'.Len = 0            '1 Literal byte, Len is 0 based
			'.Off = 0            'Offset=0 -> literal sequence, Off is 1 based
			.TotalBits = 10           'LitLen bit + 8 bits + type (Lit vs Match) selector bit 
		End With

		'----------------------------------------------------------------------------------------------------------
		'CALCULATE BEST SEQUENCE
		'----------------------------------------------------------------------------------------------------------

		CalcBestSequence(PrgLen - 1, 1)

		TotalBits += Seq(PrgLen).TotalBits

		'Dim SLB(PrgLen - 1), SOB(PrgLen - 1), LLB(PrgLen - 1), LOB(PrgLen - 1) As Byte
		'For I As Integer = 0 To PrgLen - 1
		'SLB(I) = SL(I)
		'SOB(I) = SO(I)
		'LLB(I) = LL(I)
		'LOB(I) = LO(I) Mod 256
		'Next

		'IO.File.WriteAllBytes("C:\users\tamas\onedrive\c64\coding\lethargy\SL.bin", SLB)
		'IO.File.WriteAllBytes("C:\users\tamas\onedrive\c64\coding\lethargy\SO.bin", SOB)
		'IO.File.WriteAllBytes("C:\users\tamas\onedrive\c64\coding\lethargy\LL.bin", LLB)
		'IO.File.WriteAllBytes("C:\users\tamas\onedrive\c64\coding\lethargy\LO.bin", LOB)

		'----------------------------------------------------------------------------------------------------------
		'DETECT BUFFER STATUS AND INITIALIZE COMPRESSION
		'----------------------------------------------------------------------------------------------------------

		If BytePtr = 255 Then
			FirstBlockOfNextFile = False                           'First block in buffer, Lit Selector Bit is needed (will be compression bit)
			NextFileInBuffer = False                                'This is the first file that is being added to an empty buffer
		Else
			FirstBlockOfNextFile = True                             'First block of next file in same buffer, Lit Selector Bit NOT NEEEDED
			NextFileInBuffer = True                                 'Next file is being added to buffer that already has data
		End If

		If NewBundle Then
			BlockPtr = ByteSt.Count                                 'If this is a new bundle, store Block Counter Pointer
			NewBundle = False
		End If

		Buffer(BytePtr) = (PrgAdd + PrgLen - 1) Mod 256             'Add Address Hi Byte
		AdLoPos = BytePtr

		If CheckIO(PrgLen - 1) = 1 Then                             'Check if last byte of block is under IO or in ZP
			BlockUnderIO = 1                                        'Yes, set BUIO flag
			BytePtr -= 1                                            'And skip 1 byte (=0) for IO Flag
		Else
			BlockUnderIO = 0
		End If

		Buffer(BytePtr - 1) = Int((PrgAdd + PrgLen - 1) / 256)      'Add Address Lo Byte
		AdHiPos = BytePtr - 1

		BytePtr -= 2
		LastByte = BytePtr          'The first byte of the ByteStream after (BlockCnt and IO Flag and) Address Bytes (251..253)

		'----------------------------------------------------------------------------------------------------------
		'COMPRESS FILE
		'----------------------------------------------------------------------------------------------------------

		Pack()

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Sub CalcBestSequence(SeqStart As Integer, SeqEnd As Integer)
		On Error GoTo Err

		Dim MaxO, MaxL As Integer
		Dim SeqLen, SeqOff As Integer
		Dim LeastBits As Integer

		'----------------------------------------------------------------------------------------------------------
		'CALCULATE MAX MATCH LENGTHS AND OFFSETS FOR EACH POSITION
		'----------------------------------------------------------------------------------------------------------

		'Pos = Max to Min>0 value
		For Pos As Integer = SeqStart To SeqEnd Step -1  'Pos cannot be 0, Prg(0) is always literal as it is always 1 byte left
			SO(Pos) = 0
			SL(Pos) = 0
			LO(Pos) = 0
			LL(Pos) = 0
			'Offset goes from 1 to max offset (cannot be 0)
			MaxO = If(Pos + MaxOffset < SeqStart, MaxOffset, SeqStart - Pos)    'MaxO=256 or less
			'Match length goes from 1 to max length
			MaxL = If(Pos >= MaxLongLen - 1, MaxLongLen, Pos + 1)  'MaxL=255 or less
			For O As Integer = 1 To MaxO                                    'O=1 to 255 or less
				'Check if first byte matches at offset, if not go to next offset
				If Prg(Pos) = Prg(Pos + O) Then
					For L As Integer = 1 To MaxL                            'L=1 to 254 or less
						If L = MaxL Then
							GoTo Match
						ElseIf Prg(Pos - L) <> Prg(Pos + O - L) Then
							'Find the first position where there is NO match -> this will give us the absolute length of the match
							'L=MatchLength + 1 here
							If L >= 2 Then
Match:                          If O <= ShortOffset Then
									If (SL(Pos) < MaxShortLen) And (SL(Pos) < L) Then
										SL(Pos) = If(L > MaxShortLen, MaxShortLen, L)   'Short matches cannot be longer than 4 bytes
										SO(Pos) = O       'Keep Offset 1-based
									End If
									If LL(Pos) < L Then
										LL(Pos) = L
										LO(Pos) = O
									End If
								Else
									If (LL(Pos) < L) And (L > 2) Then 'Skip short (2-byte) Mid Matches
										LL(Pos) = L
										LO(Pos) = O
									End If
								End If
							End If
							Exit For
						End If
					Next
					'If both short and long matches maxed out, we can leave the loop and go to the next Prg position
					If (LL(Pos) = If(Pos >= MaxLongLen - 1, MaxLongLen, Pos + 1)) And
						(SL(Pos) = If(Pos >= MaxShortLen - 1, MaxShortLen, Pos + 1)) Then
						Exit For
					End If
				End If
			Next
		Next

		'----------------------------------------------------------------------------------------------------------
		'FIND BEST SEQUENCE FOR EACH POSITION
		'----------------------------------------------------------------------------------------------------------

		For Pos As Integer = SeqEnd To SeqStart     'Start with second element, first has been initialized  above
			LeastBits = &HFFFFFF                    'Max block size=100 = $10000 bytes = $80000 bits, make default larger than this

			If LL(Pos) <> 0 Then
				SeqLen = LL(Pos)
			ElseIf SL(Pos) <> 0 Then
				SeqLen = SL(Pos)
			Else
				'Both LL(Pos) and SL(Pos) are 0, so this is a literal byte
				GoTo Literals
			End If

			'Check all possible lengths
			For L As Integer = SeqLen To 2 Step -1
				'For L As Integer = SeqLen To if(SeqLen - 2 > 2, SeqLen - 2, 2) Step -1
				'Get offset, use short match if possible
				SeqOff = If(L <= SL(Pos), SO(Pos), LO(Pos))

				''THIS DOES NOT SEEM TO MAKE ANY DIFFERENCE. INSTEAD, WE ARE SIMPLY EXLUDING ANY 2-BYTE MID MATCHES
				'If (L = 2) And (SeqOff > ShortOffset) Then
				'If LO(Pos - 2) = 0 And LO(Pos + 1) = 0 And SO(Pos - 2) = 0 And SO(Pos + 1) = 0 Then
				''Filter out short mid matches surrounded by literals
				'GoTo Literals
				'End If
				'End If

				'Calculate MatchBits
				CalcMatchBitSeq(L, SeqOff)

				'See if total bit count is better than best version
				If Seq(Pos + 1 - L).TotalBits + MatchBits < LeastBits Then
					'If better, update best version
					LeastBits = Seq(Pos + 1 - L).TotalBits + MatchBits
					'and save it to sequence at Pos+1 (position is 1 based)
					With Seq(Pos + 1)
						.Len = L            'MatchLen is 1 based
						.Off = SeqOff       'Off is 1 based
						.TotalBits = LeastBits
					End With
				End If
			Next

Literals:
			'Continue previous Lit sequence or start new sequence
			LitCnt = If(Seq(Pos).Off = 0, Seq(Pos).Len, -1)

			'Calculate literal bits for a presumtive LitCnt+1 value
			CalcLitBitSeq(LitCnt + 1)             'This updates LitBits
			LitBits += (LitCnt + 2) * 8         'Lit Bits + Lit Bytes
			'See if total bit count is less than best version
			If Seq(Pos - LitCnt - 1).TotalBits + LitBits < LeastBits Then  '=Seq(Pos - (LitCnt + 1)) simplified
				'If better, update best version
				LeastBits = Seq(Pos - LitCnt - 1).TotalBits + LitBits  '=Seq(Pos - (LitCnt + 1)) simplified
				'and save it to sequence at Pos+1 (position is 1 based)
				With Seq(Pos + 1)
					.Len = LitCnt + 1       'LitCnt is 0 based, LitLen is 0 based
					.Off = 0                'An offset of 0 marks a literal sequence, match offset is 1 based
					.TotalBits = LeastBits
				End With
			End If

		Next

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Sub Pack()
		On Error GoTo Err

		'Packing is done backwards

		Dim BufferFull As Boolean

		SI = PrgLen - 1
		StartPtr = SI

Restart:
		Do

			If Seq(SI + 1).Off = 0 Then
				'--------------------------------------------------------------------
				'Literal sequence
				'--------------------------------------------------------------------
				LitCnt = Seq(SI + 1).Len                'LitCnt is 0 based
				LitSI = SI
				MLen = 0                                'Reset MLen - this is needed for accurate bit counting in sequencefits

				'The max number of literals that fit in a single buffer is 245 bytes
				'This bypasses longer literal sequences and improves compression speed
				BufferFull = False

				If LitCnt > MaxLitPerBlock Then
					BufferFull = True
					LitCnt = MaxLitPerBlock
				End If

				Do While LitCnt > -1
					If SequenceFits(LitCnt + 1, CalcLitBits(LitCnt), CheckIO(SI - LitCnt)) = True Then
						Exit Do
					End If
					LitCnt -= 1
					BufferFull = True
				Loop

				'Go to next element in sequence
				SI -= LitCnt + 1    'If nothing added to the buffer, LitCnt=-1+1=0

				If BufferFull = True Then
					AddLitSequence()
					CloseBuffer()   'The whole literal sequence did not fit, buffer is full, close it
				End If

			Else
				'--------------------------------------------------------------------
				'Match sequence
				'--------------------------------------------------------------------

				BufferFull = False

				MLen = Seq(SI + 1).Len      '1 based
				MOff = Seq(SI + 1).Off      '1 based
Match:
				CalcMatchBytesAndBits(MLen, MOff)
				If MatchBytes = 3 Then
					'--------------------------------------------------------------------
					'Long Match - 3 match bytes + 0/1 match bit
					'--------------------------------------------------------------------
					If SequenceFits(3 + LitCnt + 1, MatchBits + CalcLitBits(LitCnt), CheckIO(SI - MLen + 1)) Then
						AddLitSequence()
						'Add long match
						AddLongMatch()
					Else
						MLen = MaxMidLen
						BufferFull = True   'Buffer if full, we will need to close it
						GoTo CheckMid
					End If
				ElseIf MatchBytes = 2 Then
					'--------------------------------------------------------------------
					'Mid Match - 2 match bytes + 0/1 match bit
					'--------------------------------------------------------------------
CheckMid:           If SequenceFits(2 + LitCnt + 1, MatchBits + CalcLitBits(LitCnt), CheckIO(SI - MLen + 1)) Then
						AddLitSequence()
						'Add mid match
						AddMidMatch()
					Else
						BufferFull = True
						If SO(SI) <> 0 Then
							MLen = SL(SI)   'SL and SO array indeces are 0 based
							MOff = SO(SI)
							GoTo CheckShort
						Else
							GoTo CheckLit
						End If  'Short vs Literal
					End If      'Mid vs Short
				Else
					'--------------------------------------------------------------------
					'Short Match - 1 match byte + 0/1 match bit
					'--------------------------------------------------------------------
CheckShort:         If SequenceFits(1 + LitCnt + 1, MatchBits + CalcLitBits(LitCnt), CheckIO(SI - MLen + 1)) Then
						AddLitSequence()
						'Add short match
						AddShortMatch()
					Else
						'--------------------------------------------------------------------
						'Match does not fit, check if 1 literal byte fits
						'--------------------------------------------------------------------
						BufferFull = True
CheckLit:               MLen = 0    'This is needed here for accurate Bit count calculation in sequencefits (indicates Literal, not Match)
						If SequenceFits(1 + LitCnt + 1, CalcLitBits(LitCnt + 1), CheckIO(SI - LitCnt)) Then
							If LitCnt = -1 Then
								'If no literals, current SI will be LitSI, else, do not change LitSi
								LitSI = SI
							End If
							LitCnt += 1     '0 based, now add 1 for an additional literal (first byte of match that did not fit)
							SI -= 1         'Rest of LitCnt has been already subtracted from SI
						End If  'Literal vs nothing
					End If      'Short match vs literal
				End If          'Long, mid, or short match
Done:
				SI -= MLen

				If BufferFull Then
					AddLitSequence()
					CloseBuffer()
				End If
			End If              'Lit vs match

		Loop While SI >= 0

		AddLitSequence()        'See if any remaining literals need to be added, space has been previously reserved for them

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Sub CalcMatchBytesAndBits(Length As Integer, Offset As Integer) 'Match Length is 1 based
		On Error GoTo Err

		If (Length <= MaxShortLen) And (Offset <= ShortOffset) Then
			MatchBytes = 1
		ElseIf Length <= MaxMidLen Then
			MatchBytes = 2
		Else
			MatchBytes = 3
		End If

		MatchBits = If(LitCnt = -1, 1, 0)

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Sub CalcMatchBitSeq(Length As Integer, Offset As Integer) 'Match Length is 1 based
		On Error GoTo Err

		If (Length <= MaxShortLen) And (Offset <= ShortOffset) Then
			MatchBytes = 1
		ElseIf Length <= MaxMidLen Then
			MatchBytes = 2
		Else
			MatchBytes = 3
		End If

		MatchBits = (MatchBytes * 8) + 1

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Function CalcLitBitSeq(Lits As Integer) As Integer     'LitCnt is 0 based
		On Error GoTo Err

		If Lits = -1 Then
			CalcLitBitSeq = 0                       '0	1 type selector bit for match
		ElseIf Lits > MaxLitLen Then
			CalcLitBitSeq = 8 + 3 + 5               'Lits>43
		Else
			Select Case Lits Mod (MaxLitLen + 1)    '0-43 (first 44 literals)
				Case 0
					CalcLitBitSeq += 1 + 0          '1	1 bittab bit
				Case 1 To 4
					CalcLitBitSeq += 2 + 2 + 0      '4	2 bittab bits + 2 lit sequence length bits
				Case 5 To 12
					CalcLitBitSeq += 3 + 3 + 0      '6	3 bittab bits + 3 lit sequence length bits
				Case 13 To MaxLitLen
					CalcLitBitSeq += 3 + 5 + 0      '8	3 bittab bits + 5 lit sequence length bits
			End Select
		End If

		'IN THIS VERSION, LITERALS ARE ALWAYS FOLLOWED BY MATCHES, SO TYPE SELECTOR BIT IS NOT NEEDED AFTER LITERALS AT ALL

		LitBits = CalcLitBitSeq

		Exit Function
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Function

	Private Function CalcLitBits(Lits As Integer) As Integer     'LitCnt is 0 based
		On Error GoTo Err

		If Lits = -1 Then
			CalcLitBits = 0                         '0	1 type selector bit for match
		ElseIf Lits > MaxLitLen Then
			CalcLitBits = 8 + 1 + 3 + 5
		Else
			Select Case Lits Mod (MaxLitLen + 1)
				Case 0
					CalcLitBits += 1 + 1 + 0        '2	+1 bittab bit
				Case 1 To 4
					CalcLitBits += 1 + 2 + 2        '5	+2 bittab bits + 2 lit sequence length bits
				Case 5 To 12
					CalcLitBits += 1 + 3 + 3        '7	+3 bittab bits + 3 lit sequence length bits
				Case 13 To MaxLitLen
					CalcLitBits += 1 + 3 + 5        '9	+3 bittab bits + 5 lit sequence length bits
			End Select
		End If

		LitBits = CalcLitBits

		Exit Function
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Function

	Private Function SequenceFits(BytesToAdd As Integer, BitsToAdd As Integer, Optional SequenceUnderIO As Integer = 0) As Boolean
		On Error GoTo Err

		Dim BytesFree As Integer = BytePtr      '1,2,3,...,BytePtr-1,BytePtr
		Dim BitsFree As Integer = BitPos + 1    '0-8

		'Add Close Byte + IO Byte ONLY if this is the first sequence in the block that goes under IO
		BytesToAdd += 1 + If((BlockUnderIO = 0) And (SequenceUnderIO = 1), 1, 0)

		'Add Match/Close Bit if the last sequence was a match
		BitsToAdd += If(MLen > 0, 1, 0)

		BytesToAdd += Int(BitsToAdd / 8)
		BitsToAdd = BitsToAdd Mod 8

		If BitsFree - BitsToAdd < 0 Then BytesToAdd += 1

		If BytesFree >= BytesToAdd Then
			'Check if sequence will fit within block size limits
			SequenceFits = True
			'Data will fit
			If (BlockUnderIO = 0) And (SequenceUnderIO = 1) Then
				'This is the first byte in the block that will go UIO, so lets update the buffer to include the IO flag
				For I As Integer = BytePtr To AdHiPos   'Move all data to the left in buffer, including AdHi
					Buffer(I - 1) = Buffer(I)
				Next
				Buffer(AdHiPos) = 0                     'IO Flag to previous AdHi Position
				BytePtr -= 1                            'Update BytePtr to next empty position in buffer
				BitPtr -= 1                             'BitPtr also needs to be moved - BUG reported by Raistlin/G*P
				AdHiPos -= 1                            'Update AdHi Position in Buffer
				BlockUnderIO = 1                        'Set BlockUnderIO Flag
			End If
		Else
			SequenceFits = False
		End If

		Exit Function
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

		SequenceFits = False

	End Function

	Private Sub AddMatchBit()
		On Error GoTo Err

		If LitCnt = -1 Then AddBits(0, 1)   '0		Last Literal Length was -1 or Max, we need the Match Tag

		LitCnt = -1

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Sub AddLongMatch()
		On Error GoTo Err

		TotMatch += 1

		AddMatchBit()

		Buffer(BytePtr) = LongMatchTag                   'Long Match Flag = &HF8
		Buffer(BytePtr - 1) = MLen - 1
		Buffer(BytePtr - 2) = MOff - 1
		BytePtr -= 3

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Sub AddMidMatch()
		On Error GoTo Err

		TotMatch += 1

		AddMatchBit()

		Buffer(BytePtr) = (MLen - 1) * 4                         'Length of match (#$02-#$3f, cannot be #$00 (end byte), and #$01 - distant selector??)
		Buffer(BytePtr - 1) = MOff - 1
		BytePtr -= 2

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Sub AddShortMatch()
		On Error GoTo Err

		TotMatch += 1

		AddMatchBit()

		Buffer(BytePtr) = ((MOff - 1) * 4) + (MLen - 1)
		BytePtr -= 1

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Sub AddLitSequence()
		On Error GoTo Err

		If LitCnt = -1 Then Exit Sub

		Dim Lits As Integer = LitCnt

Start:
		If Lits > MaxLitLen Then
			'First add 8/9 literal bits for 45 literals
			AddLitBits(MaxLitLen + 1)
			'Then add number of literals as a byte
			Buffer(BytePtr) = Lits + 1
			BytePtr -= 1
		Else
			'Add literal bits for 1-44 literals
			AddLitBits(Lits)
		End If

		'Then add literal bytes
		For I As Integer = 0 To Lits
			Buffer(BytePtr - I) = Prg(LitSI - I)
		Next

		BytePtr -= Lits + 1
		LitSI -= Lits + 1
		Lits = -1

		'DO NOT RESET LITCNT HERE, IT IS NEEDED AT THE SUBSEQUENT MATCH TO SEE IF A MATCHTAG IS NEEDED!!!

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString() + vbNewLine + BundleCnt.ToString + vbNewLine + BlockCnt.ToString + vbNewLine + BytePtr.ToString + vbNewLine + LitCnt.ToString, vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Sub AddLitBits(Lits As Integer)
		On Error GoTo Err

		'We are never adding more than MaxLitBit number of bits here

		If Lits = -1 Then Exit Sub    'We only call this routine with LitCnt>-1

		'This is only for statistics
		TotLit += Int(Lits / (MaxLitLen + 1)) + 1

		LitBits = 0

		If FirstBlockOfNextFile = False Then
			AddBits(1, 1)               'Add Literal Selector if this is not the first (Literal) byte in the buffer
			LitBits = 1
		Else
			FirstBlockOfNextFile = False
		End If

		Select Case Lits
			Case 0
				AddBits(0, 1)               'Add Literal Length Selector 0	- read no more bits
				LitBits += 1
			Case 1 To 4
				AddBits(&B10, 2)            'Add Literal Length Selector 10 - read 2 more bits
				AddBits(Lits - 1, 2)        'Add Literal Length: 00-03, 2 bits	-> 1000 00xx when read
				LitBits += 4
			Case 5 To 12
				AddBits(&B110, 3)           'Add Literal Length Selector 110 - read 3 more bits
				AddBits(Lits - 5, 3)        'Add Literal Length: 00-07, 3 bits	-> 1000 1xxx when read
				LitBits += 6
			Case 13 To MaxLitLen + 1
				AddBits(&B111, 3)           'Add Literal Length Selector 111 - read 5 more bits
				AddBits(Lits - 13, 5)       'Add Literal Length: 00-1f, 5 bits	-> 101x xxxx when read
				LitBits += 8
		End Select

		'DO NOT RESET LitCnt HERE!!!

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

	Private Sub AddBits(Bit As Integer, BCnt As Byte)
		On Error GoTo Err

		For I As Integer = BCnt - 1 To 0 Step -1
			If BitPos < 0 Then
				BitPos += 8
				BitPtr = BytePtr    'New BitPtr pos
				BytePtr -= 1        'and BytePtr pos
			End If
			If (Bit And 2 ^ I) <> 0 Then
				Buffer(BitPtr) = Buffer(BitPtr) Or 2 ^ BitPos
			End If
			BitPos -= 1
		Next

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub
	Public Function CloseBuffer() As Boolean
		On Error GoTo Err

		CloseBuffer = True

		'Buffer(BytePtr) = EndTag            'Technically, not needed, the default value is #$00 anyway
		Buffer(0) = Buffer(0) And &H7F  'Delete Compression Bit (Default (i.e. compressed) value is 0)

		'FIND UNCOMPRESSIBLE BLOCKS (only used if there is ONE file in the BLOCK)
		'THE COMPRESSION BITs ADD 80.5 BYTES TO THE DISK, BUT THIS MAKES DEPACKING OF UNCOMPRESSIBLE BLOCKS MUCH FASTER
		If (1 = 2) And (StartPtr - SI <= LastByte) And (StartPtr > LastByte - 1) And (NextFileInBuffer = False) And (BufferCnt > 0) Then
			'if (StartPtr - SI <= 100) And (StartPtr > LastByte - 1) And (NextFileInBuffer = False) Then
			'Less than 252/253 bytes   AND  Not the end of File      AND  No other files in this buffer
			LastByte = AdLoPos - 2

			'PrgAdd+StartPtr is the highest byte in the buffer
			Dim Highest As Integer = StartPtr
			'PrgAdd+StartPtr-(LastByte-1) is the lowest byte because the first byte in the buffer is a bitstream byte
			Dim Lowest As Integer = Highest - (LastByte - 1)

			'Highest-LastByte would result in a pointer overlapping the first, bitstream byte
			'BUFFER STRUCTURE
			'	00	01	02	03	..	FB	FC	FD	FE	FF
			'-	-FD	-FC	-FB	-FA		-2	-1	LB	AH	AL
			'		-FC = -(LastByte-1)

			'Check uncompressed Block IO Status
			If (CheckIO(Highest) = 1) Or (CheckIO(Lowest) = 1) Then
				'LastByte number of bytes fits in the buffer because the very first byte is a bitstream byte (so NOT LastByte+1)
				'If only the lowest byte is UIO then this byte will not be included in the buffer 2/2 additional I/O flag
				'So in this case we will have a pseudo-UIO block because it will have the I/O flag
				'But that will push the only byte that is UIO out of the buffer
				Buffer(AdLoPos - 1) = 0 'Set IO Flag
				AdHiPos = AdLoPos - 2   'Update AdHiPos
				LastByte = AdHiPos - 1  'Update LastByte
			Else
				'Block will not go UIO
				'IO Flag will not be set
				AdHiPos = AdLoPos - 1   'Update AdHiPos
				LastByte = AdHiPos - 1  'And LastByte
			End If

			SI = StartPtr - LastByte                         'Update POffset

			Buffer(AdHiPos) = Int((PrgAdd + SI) / 256)  'SI is 1 based
			Buffer(AdLoPos) = (PrgAdd + SI) Mod 256     'SI is 1 based

			For I As Integer = 0 To LastByte - 1            '-1 because the first byte of the buffer is the bitstream
				Buffer(LastByte - I) = Prg(StartPtr - I)
			Next

			Buffer(0) = &H80                                        'Set Copression Bit to 1 (=Uncompressed block)
			BytePtr = 1         'is this needed?

		End If

		BlockCnt += 1
		BufferCnt += 1

		'This does not work here yet, Pack needs to be changed to a function
		'If BufferCnt > BlocksFree Then
		'MsgBox("Unable to add bundle to disk :(", vbOKOnly, "Not enough free space on disk")
		'GoTo NoDisk
		'End If

		UpdateByteStream()

		ResetBuffer()                       'Resets buffer variables

		NextFileInBuffer = False            'Reset Next File flag

		If SI < 0 Then Exit Function             'We have reached the end of the file -> exit

		'If we have not reached the end of the file, then update buffer

		Buffer(BytePtr) = (PrgAdd + SI) Mod 256
		AdLoPos = BytePtr

		BlockUnderIO = CheckIO(SI)          'Check if last byte of prg could go under IO

		If BlockUnderIO = 1 Then
			BytePtr -= 1
		End If

		Buffer(BytePtr - 1) = Int((PrgAdd + SI) / 256) Mod 256
		AdHiPos = BytePtr - 1
		BytePtr -= 2
		LastByte = BytePtr               'LastByte = the first byte of the ByteStream after and Address Bytes (253 or 252 with blockCnt)

		'------------------------------------------------------------------------------------------------------------------------------
		'"COLOR BUG"
		'Compression bug related to the transitional block (i.e. finding the last block of a bundle) - FIXED
		'Fix: add 5 or 6 bytes + 2 bits to the calculation to find the last block of a bundle
		'+2 new bundle tag, +2 NEXT Bundle address, +1 first literal byte of NEXT Bundle, +0/1 IO status of first literal byte of NEXT file
		'+1 literal bit, +1 match bit (may or may not be needed, but we don't know until the end...)
		'------------------------------------------------------------------------------------------------------------------------------

		'Check if the first literal byte of the NEXT Bundle will go under I/O
		'Bits needed for next bundle is calculated in ModDisk:SortPart
		'(Next block = Second block) or (remaining bits of Last File in Bundle + Needed Bits fit in this block)
		If (BlockCnt = 1) Or ((Seq(SI).TotalBits + 8 + BitsNeededForNextBundle <= (LastByte * 8) + BitPos) And (LastFileOfBundle = True) And (NewBlock = False)) Then
			'Seq(SI).Bit = remaining bits in file
			'BitsNeededForNextBundle (5-6 bytes + 1/2 bits)
			'+5/6 bytes +1/2 bits
			'+1 byte (Close Tag)
			'Bits remaining in block: LastByte * 8 (+ remaining bits in last BitPtr (BitPos+1))
			'But we are trying to overcalculate here to avoid misidentification of the last block
			'Which would result in buggy decompression

			'This is the last block ONLY IF the remainder of the bundle + the next bundle's info fits!!!
			'AND THE NEXT Bundle IS NOT ALIGNED in which case the next block is the last one
			'Seg(SI).bit includes both the byte stream in bits and the bit stream (total bits needed to compress the remainder of the bundle)
			'+Close Tag: 8 bits
			'+BitsNeeded: 5-6 bytes for next bundle's info + 1 lit bit +/- 1 match bit (may or may not be needed, but we wouldn't know until the end)
			'For the 2nd and last block, only recalculate the first byte's sequence
			CalcBestSequence(If(SI > 1, SI, 1), If(SI > 1, SI, 1))
		Else
			'For all other blocks recalculate the first 256 bytes' sequence (max offset=256)
			CalcBestSequence(If(SI > 1, SI, 1), If(SI - MaxOffset > 1, SI - MaxOffset, 1))
		End If

		StartPtr = SI

		Exit Function
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")
NoDisk:
		CloseBuffer = False

	End Function

	Public Function CloseBundle(Optional NextFileIO As Integer = 0, Optional LastPartOnDisk As Boolean = False, Optional FromEditor As Boolean = False) As Boolean
		On Error GoTo Err

		CloseBundle = True

		If NewBlock = True Then GoTo NewB   'The bundle will start in a new block

		'ADDS NEW Bundle TAG (Long Match Tag + End Tag) TO THE END OF THE Bundle

		'-----------------------------------------------------------------------------------
		'"SPRITE BUG"
		'Compression bug related to the transitional block - FIXED
		'Fix: include NEXT file's I/O status in calculation of needed bytes
		'-----------------------------------------------------------------------------------

		'BYTES NEEDED: Long Match Tag + End Tag + AdLo + AdHi + 1st Literal + 1 if next file goes under I/O
		'BlockCnt is no longer needed - it will be overwritten by Close Tag
		Dim Bytes As Integer = 5 + NextFileIO

		'THE FIRST LITERAL ALSO NEEDS A LITERAL BIT
		'DO NOT ADD MATCH BIT HERE, IT WILL BE ADDED IN SequenceFits()
		'Bug fixed based on CloseFile bug reported by Visage/Lethargy
		Dim Bits As Integer = 1

		If SequenceFits(Bytes, Bits) Then       'This will add the EndTag to the needed bytes

			'Buffer has enough space for New Bundle Tag and New Bundle Info and first Literal byte (and IO flag if needed)

			'If last sequence was a match (no literals) then add a match bit
			If (MLen > 0) Or (LitCnt = -1) Then AddBits(0, 1)

NextPart:   'Match Bit is not needed if this is the beginning of the next block
			FilesInBuffer += 1  'There is going to be more than 1 file in the buffer

			'If FromEditor = True Then
			''NOT SURE ABOUT THIS...
			'If (BundleCnt > 2) And (FilesInBuffer = 2) Then         'Reserve last byte in buffer for Block Count...
			''... only once, when the 2nd file is added to the same buffer
			'Buffer(1) = 1                                       'Second byte reserved for BlockCnt
			'End If
			'Else
			'If (BufferCnt > 0) And (FilesInBuffer = 2) Then         'Reserve last byte in buffer for Block Count...
			''... only once, when the 2nd file is added to the same buffer
			'Buffer(1) = 1                                     'Second byte reserved for BlockCnt
			'End If
			'End If

			Buffer(1) = 1

			Buffer(BytePtr) = LongMatchTag                          'Then add New File Match Tag
			Buffer(BytePtr - 1) = EndTag
			BytePtr -= 2

			If LastPartOnDisk = True Then       'This will finish the disk
				Buffer(BytePtr) = BytePtr - 2   'Finish disk with a dummy literal byte that overwrites itself to reset LastX for next disk side
				Buffer(BytePtr - 1) = &H3       'New address is the next byte in buffer
				Buffer(BytePtr - 2) = &H0       'Dummy $00 Literal that overwrites itself
				LitCnt = 0                      'One (dummy) literal
				'AddLitBits()                   'NOT NEEDED, WE ARE IN THE MIDDLE OF THE BUFFER, 1ST BIT NEEDS TO BE OMITTED
				AddBits(0, 1)                  'ADD 2ND BIT SEPARATELY (0-BIT, TECHNCALLY, THIS IS NOT NEEDED SINCE THIS IS THE LAST BIT)
				'-------------------------------------------------------------------
				'Buffer(ByteCnt - 3) = &H0      'THIS IS THE END TAG, NOT NEEDED HERE, WILL BE ADDED WHEN BUFFER IS CLOSED
				'ByteCnt -= 4					'*BUGFIX, THANKS TO RAISTLIN/G*P FOR REPORTING
				'-------------------------------------------------------------------
				BytePtr -= 3
			End If

			'DO NOT CLOSE LAST BUFFER HERE, WE ARE GOING TO ADD NEXT Bundle TO LAST BUFFER
			If ByteSt.Count > BlockPtr + 255 Then     'Only save block count if block is already added to ByteSt
				ByteSt(BlockPtr + 1) = LastBlockCnt   'New Block Count is ByteSt(BlockPtr+1) in buffer, not ByteSt(BlockPtr+255)
				LoaderBundles += 1
			End If

			LitCnt = -1                                                 'Reset LitCnt here
		Else
NewB:          'Next File Info does not fit, so close buffer
			CloseBuffer()               'Adds EndTag and starts new buffer
			'Then add 1 dummy literal byte to new block (blocks must start with 1 literal, next bundle tag is a match tag)
			Buffer(255) = &HFD          'Dummy Address ($03fd* - first literal's address in buffer... (*NextPart above, will reserve BlockCnt)
			Buffer(254) = &H3           '...we are overwriting it with the same value
			Buffer(253) = &H0           'Dummy value, will be overwritten with itself
			LitCnt = 0
			AddLitBits(LitCnt)       'WE NEED THIS HERE, AS THIS IS THE BEGINNING OF THE BUFFER, AND 1ST BIT WILL BE CHANGED TO COMPRESSION BIT
			BytePtr = 252
			LastBlockCnt += 1

			If LastBlockCnt > 255 Then
				'Parts cannot be larger than 255 blocks compressed
				'There is some confusion here how PartCnt is used in the Editor and during Disk building...
				MsgBox("Bundle " + If(CompressBundleFromEditor = True, BundleCnt + 1, BundleCnt).ToString + " would need " + LastBlockCnt.ToString + " blocks on the disk." + vbNewLine + vbNewLine + "Bundles cannot be larger than 255 blocks!", vbOKOnly + vbCritical, "Bundle exceeds 255-block limit!")
				If CompressBundleFromEditor = False Then GoTo NoGo
			End If

			BlockCnt -= 1
			'THEN GOTO NEXT Bundle SECTION
			GoTo NextPart
		End If

		NewBlock = SetNewBlock        'NewBlock is true at closing the previous bundle, so first it just sets NewBlock2
		SetNewBlock = False            'And NewBlock2 will fire at the desired bundle

		Exit Function
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

NoGo:
		CloseBundle = False

	End Function

	Public Sub CloseFile()
		On Error GoTo Err

		'ADDS NEXT FILE TAG TO BUFFER

		'4-5 bytes and 1-2 bits needed for NextFileTag, Address Bytes and first Lit byte (+1 more if UIO)
		'BYTES NEEDED: End Tag + AdLo + AdHi + 1st Literal +/- I/O FLAG of NEW FILE's 1st literal
		'BUG reported by Raistlin/G*P
		Dim Bytes As Integer = 4 + CheckIO(PrgLen - 1)

		'THE FIRST LITERAL BYTE WILL ALSO NEED A LITERAL BIT
		'DO NOT check whether Match Bit is needed for new file - will be checked in Sequencefits()
		'BUG reported by Visage/Lethargy
		Dim Bits As Integer = 1

		If SequenceFits(Bytes, Bits) Then   'DO NOT INCLUDE NEXT NEXT FILE'S IO STATUS HERE - IT WOULD RESULT IN AN UNWANTED I/O FLAG INSERTION

			'Buffer has enough space for New File Match Tag and New File Info and first Literal byte (and I/O flag if needed)

			'If last sequence was a match (no literals) then add a match bit
			If (MLen > 0) Or (LitCnt = -1) Then AddBits(0, 1)

			Buffer(BytePtr) = NextFileTag                           'Then add New File Match Tag
			BytePtr -= 1
		Else
			'Next File Info does not fit, so close buffer, next file will start in new block
			CloseBuffer()
		End If

		Exit Sub
Err:
		ErrCode = Err.Number
		MsgBox(ErrorToString(), vbOKOnly + vbExclamation, Reflection.MethodBase.GetCurrentMethod.Name + " Error")

	End Sub

End Module
